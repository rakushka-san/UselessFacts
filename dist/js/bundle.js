(()=>{"use strict";var e,t,n,r={469:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ApiService=void 0,t.ApiService=function(){function e(){}return e.getFact=function(){return fetch(this.URL).then((function(e){return e.json()})).then((function(e){return e.text}))},e.URL="https://uselessfacts.jsph.pl/api/v2/facts/random",e}()},671:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.print=void 0,t.print=function(e,t,n,r){var i=0,o=setInterval((function(){i===t.length-1&&(clearInterval(o),void 0!==r&&r()),e.innerHTML=e.innerHTML+t[i],i++,e.scrollIntoView(!1)}),void 0!==n?85:n)}}},i={};function o(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return r[e](n,n.exports,o),n.exports}e=o(469),t=o(671),n=function(){function n(){}return n.init=function(){document.querySelector("#quote").addEventListener("click",n.setQuote),n.setQuote()},n.setQuote=function(){e.ApiService.getFact().then((function(e){var r=document.querySelector("#quote"),i=document.querySelector("#cursor");r.innerHTML="",clearInterval(n.blinkInterval),i.classList.remove("hidden"),(0,t.print)(r,e,60,(function(){n.blinkInterval=setInterval((function(){i.classList.contains("hidden")?i.classList.remove("hidden"):i.classList.add("hidden")}),500)}))}))},n}(),document.addEventListener("DOMContentLoaded",n.init)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJ1QkFBQSxFQUNBLEVBRUEsRSxvRkNIQSxxQ0FRQSxRQUxXLEVBQUFBLFFBQVAsV0FDSSxPQUFPQyxNQUFNQyxLQUFLQyxLQUNiQyxNQUFLLFNBQUFDLEdBQVksT0FBQUEsRUFBU0MsTUFBVCxJQUNqQkYsTUFBSyxTQUFBRSxHQUFRLE9BQUFBLEVBQUtDLElBQUwsR0FDdEIsRUFOTyxFQUFBSixJQUFjLG1EQU96QixDLENBUkEsRSw4RUNBQSxpQkFBc0JLLEVBQWFELEVBQWNFLEVBQVlDLEdBQ3pELElBQUlDLEVBQWdCLEVBQ2RDLEVBQWdCQyxhQUFZLFdBQzFCRixJQUFVSixFQUFLTyxPQUFTLElBQ3hCQyxjQUFjSCxRQUVHSSxJQUFiTixHQUNBQSxLQUdSRixFQUFHUyxVQUFZVCxFQUFHUyxVQUFZVixFQUFLSSxHQUNuQ0EsSUFDQUgsRUFBR1UsZ0JBQWUsRUFDdEIsUUFBV0YsSUFBUFAsRUFBbUIsR0FBS0EsRUFDaEMsQyxHQ2JJVSxFQUEyQixDQUFDLEVBR2hDLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJMLElBQWpCTSxFQUNILE9BQU9BLEVBQWFDLFFBR3JCLElBQUlDLEVBQVNMLEVBQXlCRSxHQUFZLENBR2pERSxRQUFTLENBQUMsR0FPWCxPQUhBRSxFQUFvQkosR0FBVUcsRUFBUUEsRUFBT0QsUUFBU0gsR0FHL0NJLEVBQU9ELE9BQ2YsQ0h0QkEsU0FDQSxTQUVBLDBCQThCQSxRQTNCa0IsRUFBQUcsS0FBZCxXQUNrQkMsU0FBU0MsY0FBYyxVQUMvQkMsaUJBQWlCLFFBQVNDLEVBQUlDLFVBQ3BDRCxFQUFJQyxVQUNSLEVBRWUsRUFBQUEsU0FBZixXQUNJLEVBQUFDLFdBQVdoQyxVQUNOSSxNQUFLLFNBQUFHLEdBQ0YsSUFBTTBCLEVBQVFOLFNBQVNDLGNBQWMsVUFDL0JNLEVBQVNQLFNBQVNDLGNBQWMsV0FFdENLLEVBQU1oQixVQUFZLEdBQ2xCRixjQUFjZSxFQUFJSyxlQUNsQkQsRUFBT0UsVUFBVUMsT0FBTyxXQUV4QixJQUFBQyxPQUFNTCxFQUFPMUIsRUFBTSxJQUFJLFdBQ25CdUIsRUFBSUssY0FBZ0J0QixhQUFZLFdBQ3hCcUIsRUFBT0UsVUFBVUcsU0FBUyxVQUMxQkwsRUFBT0UsVUFBVUMsT0FBTyxVQUV4QkgsRUFBT0UsVUFBVUksSUFBSSxTQUU3QixHQUFHLElBQ1AsR0FDSixHQUNSLEVBQ0osRUE5QkEsR0FnQ0FiLFNBQVNFLGlCQUFpQixtQkFBb0JDLEVBQUlKLEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c2VsZXNzZmFjdHMvLi9hc3NldHMvdHMvYXBwLnRzIiwid2VicGFjazovL3VzZWxlc3NmYWN0cy8uL2Fzc2V0cy90cy9hcGkuc2VydmljZS50cyIsIndlYnBhY2s6Ly91c2VsZXNzZmFjdHMvLi9hc3NldHMvdHMvcHJpbnQudHMiLCJ3ZWJwYWNrOi8vdXNlbGVzc2ZhY3RzL3dlYnBhY2svYm9vdHN0cmFwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwaVNlcnZpY2UgfSBmcm9tICcuL2FwaS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgcHJpbnQgfSBmcm9tICcuL3ByaW50JztcclxuXHJcbmNsYXNzIEFwcCB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBibGlua0ludGVydmFsOiBOb2RlSlMuVGltZXI7XHJcbiAgICBcclxuICAgIHB1YmxpYyBzdGF0aWMgaW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBxdW90ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNxdW90ZScpO1xyXG4gICAgICAgIHF1b3RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgQXBwLnNldFF1b3RlKTtcclxuICAgICAgICBBcHAuc2V0UXVvdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBzZXRRdW90ZSgpOiB2b2lkIHtcclxuICAgICAgICBBcGlTZXJ2aWNlLmdldEZhY3QoKVxyXG4gICAgICAgICAgICAudGhlbih0ZXh0ID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHF1b3RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3F1b3RlJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJzb3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY3Vyc29yJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgcXVvdGUuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKEFwcC5ibGlua0ludGVydmFsKVxyXG4gICAgICAgICAgICAgICAgY3Vyc29yLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG5cclxuICAgICAgICAgICAgICAgIHByaW50KHF1b3RlLCB0ZXh0LCA2MCwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIEFwcC5ibGlua0ludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3Vyc29yLmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvci5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvci5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIDUwMClcclxuICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBBcHAuaW5pdCk7IiwiZXhwb3J0IGNsYXNzIEFwaVNlcnZpY2Uge1xyXG4gICAgc3RhdGljIFVSTDogc3RyaW5nID0gJ2h0dHBzOi8vdXNlbGVzc2ZhY3RzLmpzcGgucGwvYXBpL3YyL2ZhY3RzL3JhbmRvbSc7XHJcblxyXG4gICAgc3RhdGljIGdldEZhY3QoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gZmV0Y2godGhpcy5VUkwpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcclxuICAgICAgICAgICAgLnRoZW4oanNvbiA9PiBqc29uLnRleHQpO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGZ1bmN0aW9uIHByaW50KGVsOiBFbGVtZW50LCB0ZXh0OiBzdHJpbmcsIG1zPzpudW1iZXIsIGNhbGxiYWNrPzogYW55KSB7XHJcbiAgICBsZXQgaW5kZXg6IG51bWJlciA9IDA7XHJcbiAgICBjb25zdCBwcmludEludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgIGlmIChpbmRleCA9PT0gdGV4dC5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocHJpbnRJbnRlcnZhbCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbC5pbm5lckhUTUwgPSBlbC5pbm5lckhUTUwgKyB0ZXh0W2luZGV4XTtcclxuICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgIGVsLnNjcm9sbEludG9WaWV3KGZhbHNlKTtcclxuICAgIH0sIChtcyAhPT0gdW5kZWZpbmVkID8gODUgOiBtcykpO1xyXG59IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiJdLCJuYW1lcyI6WyJnZXRGYWN0IiwiZmV0Y2giLCJ0aGlzIiwiVVJMIiwidGhlbiIsInJlc3BvbnNlIiwianNvbiIsInRleHQiLCJlbCIsIm1zIiwiY2FsbGJhY2siLCJpbmRleCIsInByaW50SW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImxlbmd0aCIsImNsZWFySW50ZXJ2YWwiLCJ1bmRlZmluZWQiLCJpbm5lckhUTUwiLCJzY3JvbGxJbnRvVmlldyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiaW5pdCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJBcHAiLCJzZXRRdW90ZSIsIkFwaVNlcnZpY2UiLCJxdW90ZSIsImN1cnNvciIsImJsaW5rSW50ZXJ2YWwiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJwcmludCIsImNvbnRhaW5zIiwiYWRkIl0sInNvdXJjZVJvb3QiOiIifQ==