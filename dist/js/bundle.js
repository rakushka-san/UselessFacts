(()=>{"use strict";var e,t,n,r={469:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ApiService=void 0,t.ApiService=function(){function e(){}return e.getFact=function(){return fetch(this.URL).then((function(e){return e.json()})).then((function(e){return e.text}))},e.URL="https://uselessfacts.jsph.pl/api/v2/facts/random",e}()},671:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.print=void 0,t.print=function(e,t,n,r){var i=0,o=setInterval((function(){i===t.length-1&&(clearInterval(o),void 0!==r&&r()),e.innerHTML=e.innerHTML+t[i],i++,e.scrollIntoView(!1)}),void 0!==n?85:n)}}},i={};function o(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return r[e](n,n.exports,o),n.exports}e=o(469),t=o(671),n=function(){function n(){}return n.init=function(){document.querySelector("#quote").addEventListener("click",n.setQuote),n.setQuote()},n.setQuote=function(){e.ApiService.getFact().then((function(e){var r=document.querySelector("#quote"),i=document.querySelector("#cursor");r.innerHTML="",r.removeEventListener("click",n.setQuote),clearInterval(n.blinkInterval),i.classList.remove("hidden"),(0,t.print)(r,e,60,(function(){n.blinkInterval=setInterval((function(){i.classList.contains("hidden")?i.classList.remove("hidden"):i.classList.add("hidden")}),500),r.addEventListener("click",n.setQuote)}))}))},n}(),document.addEventListener("DOMContentLoaded",n.init)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJ1QkFBQSxFQUNBLEVBRUEsRSxvRkNIQSxxQ0FRQSxRQUxXLEVBQUFBLFFBQVAsV0FDSSxPQUFPQyxNQUFNQyxLQUFLQyxLQUNiQyxNQUFLLFNBQUFDLEdBQVksT0FBQUEsRUFBU0MsTUFBVCxJQUNqQkYsTUFBSyxTQUFBRSxHQUFRLE9BQUFBLEVBQUtDLElBQUwsR0FDdEIsRUFOTyxFQUFBSixJQUFjLG1EQU96QixDLENBUkEsRSw4RUNBQSxpQkFBc0JLLEVBQWFELEVBQWNFLEVBQVlDLEdBQ3pELElBQUlDLEVBQWdCLEVBQ2RDLEVBQWdCQyxhQUFZLFdBQzFCRixJQUFVSixFQUFLTyxPQUFTLElBQ3hCQyxjQUFjSCxRQUVHSSxJQUFiTixHQUNBQSxLQUdSRixFQUFHUyxVQUFZVCxFQUFHUyxVQUFZVixFQUFLSSxHQUNuQ0EsSUFDQUgsRUFBR1UsZ0JBQWUsRUFDdEIsUUFBV0YsSUFBUFAsRUFBbUIsR0FBS0EsRUFDaEMsQyxHQ2JJVSxFQUEyQixDQUFDLEVBR2hDLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJMLElBQWpCTSxFQUNILE9BQU9BLEVBQWFDLFFBR3JCLElBQUlDLEVBQVNMLEVBQXlCRSxHQUFZLENBR2pERSxRQUFTLENBQUMsR0FPWCxPQUhBRSxFQUFvQkosR0FBVUcsRUFBUUEsRUFBT0QsUUFBU0gsR0FHL0NJLEVBQU9ELE9BQ2YsQ0h0QkEsU0FDQSxTQUVBLDBCQWlDQSxRQTlCa0IsRUFBQUcsS0FBZCxXQUNrQkMsU0FBU0MsY0FBYyxVQUMvQkMsaUJBQWlCLFFBQVNDLEVBQUlDLFVBQ3BDRCxFQUFJQyxVQUNSLEVBRWUsRUFBQUEsU0FBZixXQUNJLEVBQUFDLFdBQVdoQyxVQUNOSSxNQUFLLFNBQUFHLEdBQ0YsSUFBTTBCLEVBQVFOLFNBQVNDLGNBQWMsVUFDL0JNLEVBQVNQLFNBQVNDLGNBQWMsV0FFdENLLEVBQU1oQixVQUFZLEdBQ2xCZ0IsRUFBTUUsb0JBQW9CLFFBQVNMLEVBQUlDLFVBRXZDaEIsY0FBY2UsRUFBSU0sZUFDbEJGLEVBQU9HLFVBQVVDLE9BQU8sV0FFeEIsSUFBQUMsT0FBTU4sRUFBTzFCLEVBQU0sSUFBSSxXQUNuQnVCLEVBQUlNLGNBQWdCdkIsYUFBWSxXQUN4QnFCLEVBQU9HLFVBQVVHLFNBQVMsVUFDMUJOLEVBQU9HLFVBQVVDLE9BQU8sVUFFeEJKLEVBQU9HLFVBQVVJLElBQUksU0FFN0IsR0FBRyxLQUNIUixFQUFNSixpQkFBaUIsUUFBU0MsRUFBSUMsU0FDeEMsR0FDSixHQUNSLEVBQ0osRUFqQ0EsR0FtQ0FKLFNBQVNFLGlCQUFpQixtQkFBb0JDLEVBQUlKLEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c2VsZXNzZmFjdHMvLi9hc3NldHMvdHMvYXBwLnRzIiwid2VicGFjazovL3VzZWxlc3NmYWN0cy8uL2Fzc2V0cy90cy9hcGkuc2VydmljZS50cyIsIndlYnBhY2s6Ly91c2VsZXNzZmFjdHMvLi9hc3NldHMvdHMvcHJpbnQudHMiLCJ3ZWJwYWNrOi8vdXNlbGVzc2ZhY3RzL3dlYnBhY2svYm9vdHN0cmFwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwaVNlcnZpY2UgfSBmcm9tICcuL2FwaS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgcHJpbnQgfSBmcm9tICcuL3ByaW50JztcclxuXHJcbmNsYXNzIEFwcCB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBibGlua0ludGVydmFsOiBOb2RlSlMuVGltZXI7XHJcbiAgICBcclxuICAgIHB1YmxpYyBzdGF0aWMgaW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBxdW90ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNxdW90ZScpO1xyXG4gICAgICAgIHF1b3RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgQXBwLnNldFF1b3RlKTtcclxuICAgICAgICBBcHAuc2V0UXVvdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBzZXRRdW90ZSgpOiB2b2lkIHtcclxuICAgICAgICBBcGlTZXJ2aWNlLmdldEZhY3QoKVxyXG4gICAgICAgICAgICAudGhlbih0ZXh0ID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHF1b3RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3F1b3RlJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJzb3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY3Vyc29yJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgcXVvdGUuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgICAgICAgICBxdW90ZS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIEFwcC5zZXRRdW90ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChBcHAuYmxpbmtJbnRlcnZhbCk7XHJcbiAgICAgICAgICAgICAgICBjdXJzb3IuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgcHJpbnQocXVvdGUsIHRleHQsIDYwLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgQXBwLmJsaW5rSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJzb3IuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaWRkZW4nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICAgICAgICAgICAgICBxdW90ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIEFwcC5zZXRRdW90ZSk7XHJcbiAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgQXBwLmluaXQpOyIsImV4cG9ydCBjbGFzcyBBcGlTZXJ2aWNlIHtcclxuICAgIHN0YXRpYyBVUkw6IHN0cmluZyA9ICdodHRwczovL3VzZWxlc3NmYWN0cy5qc3BoLnBsL2FwaS92Mi9mYWN0cy9yYW5kb20nO1xyXG5cclxuICAgIHN0YXRpYyBnZXRGYWN0KCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKHRoaXMuVVJMKVxyXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAgICAgICAgIC50aGVuKGpzb24gPT4ganNvbi50ZXh0KTtcclxuICAgIH1cclxufSIsImV4cG9ydCBmdW5jdGlvbiBwcmludChlbDogRWxlbWVudCwgdGV4dDogc3RyaW5nLCBtcz86bnVtYmVyLCBjYWxsYmFjaz86IGFueSkge1xyXG4gICAgbGV0IGluZGV4OiBudW1iZXIgPSAwO1xyXG4gICAgY29uc3QgcHJpbnRJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICBpZiAoaW5kZXggPT09IHRleHQubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICBjbGVhckludGVydmFsKHByaW50SW50ZXJ2YWwpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWwuaW5uZXJIVE1MID0gZWwuaW5uZXJIVE1MICsgdGV4dFtpbmRleF07XHJcbiAgICAgICAgaW5kZXgrKztcclxuICAgICAgICBlbC5zY3JvbGxJbnRvVmlldyhmYWxzZSk7XHJcbiAgICB9LCAobXMgIT09IHVuZGVmaW5lZCA/IDg1IDogbXMpKTtcclxufSIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iXSwibmFtZXMiOlsiZ2V0RmFjdCIsImZldGNoIiwidGhpcyIsIlVSTCIsInRoZW4iLCJyZXNwb25zZSIsImpzb24iLCJ0ZXh0IiwiZWwiLCJtcyIsImNhbGxiYWNrIiwiaW5kZXgiLCJwcmludEludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJsZW5ndGgiLCJjbGVhckludGVydmFsIiwidW5kZWZpbmVkIiwiaW5uZXJIVE1MIiwic2Nyb2xsSW50b1ZpZXciLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImluaXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiQXBwIiwic2V0UXVvdGUiLCJBcGlTZXJ2aWNlIiwicXVvdGUiLCJjdXJzb3IiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYmxpbmtJbnRlcnZhbCIsImNsYXNzTGlzdCIsInJlbW92ZSIsInByaW50IiwiY29udGFpbnMiLCJhZGQiXSwic291cmNlUm9vdCI6IiJ9